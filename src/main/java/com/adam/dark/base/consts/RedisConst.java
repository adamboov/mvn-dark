package com.adam.dark.base.consts;

/**
 * @author VAIO-adam\
 * redis常用五种数据类型:string,hash,list,set,zset(sorted set).
 * Redis 常量 key
 */
public class RedisConst {

    ////////////////////////////////////////////////////////////////////
    //
    //                             string 字符串
    //
    ////////////////////////////////////////////////////////////////////

    public static final String AUTO_INCR = "AUTO_INCL_ID";


    ////////////////////////////////////////////////////////////////////
    //
    //                             hash
    //          hash是一个string类型的field和value的映射表，
    //          hash特别适合用于存储对象(应为对象可能会包含很多属性)
    //
    ////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////
    //
    //                             list 集合区
    //              按照插入顺序排序(内部实现为LinkedList)
    //
    ////////////////////////////////////////////////////////////////////


    /**
     * 敏感词集合
     */
    public static final String SENSITIVE_WORD_LIST = "SensitiveWordList";

    /**
     * 机构所有数据
     */
    public static final String BRANCH_LIST = "BranchList";

    /**
     * 机构所有数据构建成树
     */
    public static final String BRANCH_TREE_LIST = "BranchTreeList";


    ////////////////////////////////////////////////////////////////////
    //
    //                              set
    //  案例：在微博中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。
    //Redis还为集合提供了求交集、并集、差集等操作，可以非常方便地实现如共同关注、共同喜好、
    //二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是
    //存到一个新地集合中
    //
    ////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////
    //
    //                              zset
    // Redis sorted set的内部使用HashMap和跳跃表(SkipList)来保证数据的存储和有序，
    // HashMap里放的是成员到score的映射，跳跃表按score从小到大保存所有集合元素。
    // 使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。时间复杂度与红黑树
    // 相同，增加、删除的操作较为简单     应用场景：排行榜
    //
    ////////////////////////////////////////////////////////////////////


    ////////////////////////////////////////////////////////////////////
    //
    //                              group分组区
    //
    ////////////////////////////////////////////////////////////////////

    /**
     * 过期监听组
     */
    public static final String LISTENER_LIST_GROUP = "listener:list:";

}
